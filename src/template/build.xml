<?xml version="1.0" encoding="UTF-8"?>
<project name="Template" default="jar" basedir=".">
    <property name="props" value="build.properties"/>
    <property file="${props}"/>
	<property name="name" value="${application.name}"/>
	<!-- Preexisitng Directories -->
	<property name="src" location="src"/>
	<property name="lib" location="lib"/>
	<property name="tools" location="tools"/>
		<property name="manifest" location="${tools}/manifest"/>
		<property name="onejar" location="${tools}/onejar"/>
		<property name="jarbundler" location="${tools}/jarbundler"/>
		<property name="jsmooth" location="${tools}/jsmooth"/>
			<property name="jsmooth.edit" location="${jsmooth}/editor"/>
			<property name="jsmooth.infile" location="${jsmooth}/ant.jsmooth"/>
		<property name="applejava" location="${tools}/applejava"/>
		<property name="google" location="${tools}/google"/>
	<!-- Output Directories -->	
	<property name="build" location="build"/>
		<property name="bin" location="${build}/bin"/>
		<property name="dist" location="${build}/dist"/>
			<property name="jarfile" location="${dist}/${name}.jar"/>
			<property name="appfile" location="${dist}/${name}.app"/>
			<property name="exefile" location="${dist}/${name}.exe"/>
			<property name="jsmooth.outfile" location="${dist}/${name}.jsmooth"/>
		<property name="jar" location="${build}/jar"/>
			<property name="jar.main" location="${jar}/main"/>
			<property name="jar.lib" location="${jar}/lib"/>
			<property name="jarfile.main" location="${jar.main}/main.jar"/>		
		<property name="app" location="${build}/app"/>
		<property name="exe" location="${build}/exe"/>
	
	<taskdef name="jarbundler" classname="net.sourceforge.jarbundler.JarBundler"  classpath="${jarbundler}/jarbundler-1.9.jar"/>
	<taskdef name="jsmoothgen" classname="net.charabia.jsmoothgen.ant.JSmoothGen" classpath="${jsmooth}/jsmoothgen-ant.jar"/>
	<condition property="google.classpath"
		value="${google};${google}/ant-googlecode-0.0.1.jar"
		else="${google}/ant-googlecode-0.0.1.jar">
		<not>
			<available classname="org.apache.tools.ant.util.Base64Converter"/>
		</not>
	</condition>
	<echo message="Google classpath set to ${google.classpath}"/>
	<taskdef classname="net.bluecow.googlecode.ant.GoogleCodeUploadTask" classpath="${google.classpath}" name="gcupload"/>
	
	<condition property="onejar.do">
		<istrue value="${onejar.use}"/>
	</condition>
	<condition property="include.do">
		<isfalse value="${onejar.use}"/>
	</condition>
	<condition property="version.do">
		<istrue value="${build.doversion}"/>
	</condition>
	<condition property="version.default">
		<isfalse value="${build.doversion}"/>
	</condition>
	<condition property="mainclass" value="com.simontuffs.onejar.Boot">
		<istrue value="${onejar.use}"/>
	</condition>
	<condition property="mainclass" value="${main.class}">
		<isfalse value="${onejar.use}"/>
	</condition>
	<condition property="is.mac">
		<os family="mac"/>
	</condition>
	<condition property="not.mac">
		<not>
			<os family="mac"/>
		</not>
	</condition>
	<condition property="is.windows">
		<os family="windows"/>
	</condition>
	<condition property="is.unix">
		<and>
			<os family="unix"/>
			<not><os family="mac"/></not>
		</and>
	</condition>
	<condition property="is.other">
		<and>
			<not><os family="mac"/></not>
			<not><os family="unix"/></not>
			<not><os family="windows"/></not>
		</and>
	</condition>

	<fileset id="lib.jars" dir="${lib}">
		<include name="**/*.jar"/>
	</fileset>
	<path id="lib.path">
		<fileset refid="lib.jars"/>
		<pathelement path="${applejava}/AppleJavaExtensions.jar"/>
	</path>
	
	<target name="compile.onejar" description="Compile onejar">
		<javac srcdir="${onejar}" destdir="${onejar}"
			source="1.4" target="1.4"
			failonerror="true"
        	includes="**/*.java">
		</javac>
	</target>
	
	<target name="prepare" description="Create build dirs">
		<mkdir dir="${build}"/>
			<mkdir dir="${bin}"/>
			<mkdir dir="${dist}"/>
			<mkdir dir="${jar}"/>
				<mkdir dir="${jar.main}"/>
				<mkdir dir="${jar.lib}"/>
			<mkdir dir="${app}"/>
			<mkdir dir="${exe}"/>
	</target>
	
	<target name="version.input" depends="prepare" if="version.do">
		<input
			message="Please input a new version. Current version ${build.version}"
			addproperty="new.version"
		 />
		<propertyfile file="${props}">
			<entry key="build.version" value="${new.version}"/>
		</propertyfile>
		<condition property="version.default">
			<equals arg1="${new.doversion}" arg2=""/>
		</condition>
	</target>
	<target name="version.default" depends="version.input">
		<property name="new.version" value="${build.version}"/>
	</target>
	<target name="version" depends="version.input,version.default" description="Prompt user to enter new version">
		<!-- At the moment version requires nothing else -->
	</target>
	
	<target name="create.jsmooth" depends="prepare" description="Create JSmooth config file">
		<copy file="${application.win.icon}" todir="${dist}"/>
		<copy file="${jsmooth.infile}" tofile="${jsmooth.outfile}"/>
		<replace file="${jsmooth.outfile}" token="@icofile@" value="${application.win.icon}"/>
		<replace file="${jsmooth.outfile}" token="@exefile@" value="${name}.exe"/>
		<replace file="${jsmooth.outfile}" token="@jarfile@" value="${name}.jar"/>
		<replace file="${jsmooth.outfile}" token="@mainclass@" value="${mainclass}"/>
	</target>
	
	<target name="compile" depends="prepare" description="Compile code">
		<javac srcdir="${src}" destdir="${bin}"
			source="${build.jvm}" target="${build.jvm}"
			failonerror="true"
			includes="**/*.*"
			classpathref="lib.path">
		</javac>
		<propertyfile file="${props}">
			<entry key="build.date" type="date" value="now"/>
		</propertyfile>
		<buildnumber file="${props}"/>
		<copy todir="${bin}">
			<fileset dir="${src}">
				<exclude name="**/*.java"/>
			</fileset>
		</copy>
		<copy file="${props}" todir="${bin}"/>
		<manifest file="${manifest}/main-MANIFEST.MF">
			<attribute name="Manifest-Version" value="1.0"/>
			<attribute name="Main-Class" value="${main.class}"/>
		</manifest>
	</target>
			
	<target name="jar.onejar" depends="compile" if="onejar.do">
		<echo message="Placing library jars witin main jar, onejar.use=${onejar.use}."/>
		<copy todir="${jar.lib}">
			<fileset dir="${lib}"/>		
		</copy>
		<!--
		<manifestclasspath property="jar.classpath" jarfile="${jarfile.main}">
			<classpath refid="lib.path"/>
		</manifestclasspath>
			<attribute name="Class-Path" value="${jar.classpath}" />
		-->
		<jar jarfile="${jarfile.main}" basedir="${bin}" manifest="${manifest}/main-MANIFEST.MF">
		</jar>
		<jar jarfile="${jarfile}" manifest="${manifest}/onejar-MANIFEST.MF">
			<fileset dir="${jar}"/>
		    <fileset dir="${onejar}" includes="**/*.class"/>
		</jar>
	</target>
	<target name="jar.include" depends="compile" if="include.do">
		<echo message="Extracting and including library jars in main jar, onejar.use=${onejar.use}."/>
		<jar jarfile="${jarfile}" basedir="${bin}" manifest="${manifest}/main-MANIFEST.MF">
			<!-- Merge library jars into final jar file -->
			<zipgroupfileset refid="lib.jars"/>
		</jar>
	</target>

	<target name="jar" depends="jar.onejar,jar.include" description="Build jar">
		<!-- At the moment jar requires nothing else -->
	</target>
	<target name="exe" depends="jar,create.jsmooth" description="Build exe">
		<jsmoothgen project="${jsmooth.outfile}" skeletonroot="${jsmooth}/skeletons"/>
	</target>
	<target name="app" depends="jar" description="Build app">
		<jarbundler
			name="${name}"
			shortname="${name}"
			icon="${application.osx.icon}"
			jvmversion="${build.jvm}+"
			build="${build.number}"
			version="${build.version}"
			dir="${dist}"
			mainclass="${mainclass}"
			jar="${jarfile}"/>
	</target>
	<target name="dmg" depends="version,app" description="Make dmg" if="is.mac">
		<property name="mac.dist" value="${name}-${new.version}.dmg"/>
		<property name="mac.dist.full" location="${dist}/${mac.dist}"/>
		<property name="mac.sf.type" value="dmg"/>
		<!-- Requires OSX -->
		<exec dir="${dist}" executable="hdiutil">
			<arg line="create -ov -srcfolder ${name}.app ${mac.dist}"/>
		</exec>
	</target>
	<target name="mac.zip" depends="version,app" description="Make mac zip" if="not.mac">
		<property name="mac.dist" value="${name}-mac-${new.version}.zip"/>
		<property name="mac.dist.full" location="${dist}/${mac.dist}"/>
		<property name="mac.sf.type" value="binary_zip"/>
		<zip destfile="${mac.dist.full}"
			basedir="${dist}"
			includes="${name}.app" />
	</target>
	<target name="win.zip" depends="version,exe" description="Make windows zip">
		<property name="win.dist" value="${name}-win-${new.version}.zip"/>
		<property name="win.dist.full" location="${dist}/${win.dist}"/>
		<zip destfile="${win.dist.full}"
			basedir="${dist}"
			includes="${name}.exe" />
	</target>
	<target name="other.zip" depends="version,jar" description="Make other zip">
		<property name="other.dist" value="${name}-other-${new.version}.zip"/>
		<property name="other.dist.full" location="${dist}/${other.dist}"/>
		<zip destfile="${other.dist.full}"
			basedir="${dist}"
			includes="${name}.jar" />
	</target>
	<target name="source.zip" depends="version,jar" description="Make source zip">
		<property name="source.dist" value="${name}-source-${new.version}.zip"/>
		<property name="source.dist.full" location="${dist}/${source.dist}"/>
		<move file="secret.properties" tofile="secret.temp.properties"/>
		<copy file="secret.example.properties" tofile="secret.properties"/>
		<zip destfile="${source.dist.full}">
			<fileset dir=".">
				<include name="**"/>
				<exclude name="**/.svn/**"/>
				<exclude name="**/build/**"/>
				<exclude name="secret.temp.properties"/>
			</fileset>
		</zip>
		<delete file="secret.properties"/>
		<move file="secret.temp.properties" tofile="secret.properties"/>
	</target>

	<target name="run" depends="jar" description="Run jar file">
		<java jar="${jarfile}" fork="yes" failonerror="true"/>
	</target>

	<target name="build" description="Build exe,app" depends="exe,app">
		<!-- At the moment build requires nothing else -->
	</target>
	
	<target name="release" description="Create release dmg/zips" depends="mac.zip,dmg,win.zip,other.zip,source.zip">
		<!-- At the moment release requires nothing else -->
	</target>

	<target name="ftp" description="Deploy All To FTP Location" depends="release">
		<!-- TODO -->
	</target>

	<target name="sourceforge" description="Deploy All To Sourceforge" depends="release">
		<tstamp>
			<format property="sourceforge.date" pattern="d/M/yyyy"/>
		</tstamp>
		<sfpublish
			releasename="${new.version}"
			packagename="${sourceforge.project}"
			packagehidden="no"
			hidden="no"
			projectshortname="${sourceforge.project}"
			projectname="${sourceforge.project}"
			username="${sourceforge.username}"
			password="${sourceforge.password}"
			releasedate="${sourceforge.date}">
			<filespec
				file="${source.dist.full}"
				filetype="source_zip"
				processortype="platform_independent"/>
			<filespec
				file="${other.dist.full}"
				filetype="binary_zip"
				processortype="platform_independent"/>
			<filespec
				file="${mac.dist.full}"
				filetype="${mac.sf.type}"
				processortype="any"/>
			<filespec
				file="${win.dist.full}"
				filetype="binary_zip"
				processortype="i386"/>
		</sfpublish>
	</target>

	<target name="google" description="Deploy All To GoogleCode" depends="release">
        <gcupload 
        	username="${google.username}" 
	        password="${google.password}" 
    	    projectname="${google.project}" 
        	filename="${source.dist.full}" 
	        targetfilename="${source.dist}"
    	    summary="${name} Source"
        	labels="OpSys-Windows, Type-Source, ${name}"/>
		<gcupload 
        	username="${google.username}" 
	        password="${google.password}" 
    	    projectname="${google.project}" 
        	filename="${other.dist.full}" 
	        targetfilename="${other.dist}"
    	    summary="${name} All Platforms"
        	labels="Featured, OpSys-All, OpSys-Linux, Type-Executable, ${name}"/>
		<gcupload 
        	username="${google.username}" 
	        password="${google.password}" 
    	    projectname="${google.project}" 
        	filename="${mac.dist.full}" 
	        targetfilename="${mac.dist}"
    	    summary="${name} Mac OSX"
        	labels="Featured, OpSys-OSX, Type-Executable, ${name}"/>
        <gcupload 
        	username="${google.username}" 
	        password="${google.password}" 
    	    projectname="${google.project}" 
        	filename="${win.dist.full}" 
	        targetfilename="${win.dist}"
    	    summary="${name} Windows"
        	labels="Featured, OpSys-Windows, Type-Executable, ${name}"/>
	</target>

	<target name="deploy" description="Deploy to sourceforge/googlecode/ftp" depends="sourceforge,google,ftp">
		<!-- At the moment deploy requires nothing else -->
	</target>

	<target name="clean" description="Remove build and dist directories">
		<delete dir="${build}"/>
	</target>
</project>